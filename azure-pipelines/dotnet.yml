parameters:
- name: test_filter
  default: ''
  type: string
  displayName: 'Testing Category Filter'
- name: build_configuration
  default: 'Windows-Release'
  type: string
  displayName: 'Build Configuration'

steps:

- script: dotnet build -c ${{ parameters.build_configuration }} /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build

- script: dotnet pack -c ${{ parameters.build_configuration }} /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: dotnet pack

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.1
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f netcoreapp2.1 ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_netcoreapp2.1.binlog"
    testRunTitle: netcoreapp2.1-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp3.1
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f netcoreapp3.1 ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_netcoreapp3.1.binlog"
    testRunTitle: netcoreapp3.1-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net5.0
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net5.0 ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net5.0.binlog"
    testRunTitle: net5.0-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net6.0
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net6.0 ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net6.0.binlog"
    testRunTitle: net6.0-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net461
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net461 ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net461.binlog"
    testRunTitle: net461-$(Agent.JobName)
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT')) # Run on Windows_NT agents only

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net5.0-windows
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net5.0-windows ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net5.0_windows.binlog"
    testRunTitle: net5.0-windows-$(Agent.JobName)
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT')) # Run on Windows_NT agents only

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net6.0-windows
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net6.0-windows ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net6.0_windows.binlog"
    testRunTitle: net6.0-windows-$(Agent.JobName)
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT')) # Run on Windows_NT agents only

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net6.0-macos
  inputs:
    command: test
    arguments: -c ${{ parameters.build_configuration }} -f net6.0-macos ${{ parameters.test_filter }} -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net6.0_macos.binlog"
    testRunTitle: net6.0-macos-$(Agent.JobName)
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin')) # Run on MacOS (Darwin) agents only

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)"
  failOnStderr: true
  displayName: Publish artifacts
  condition: succeededOrFailed()

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols-$(Agent.JobName)
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: eq(variables['Agent.OS'], 'Windows_NT') # Execute on failed test runs too. Windows-only till https://github.com/microsoft/azure-pipelines-tasks/issues/13821 is fixed.

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/test_symbols-$(Agent.JobName)
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish test symbols to symbol server
  condition: and(failed(), eq(variables['Agent.OS'], 'Windows_NT')) # Execute on failed test runs only.

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
