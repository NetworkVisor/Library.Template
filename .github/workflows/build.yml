name: CI

on:
  push:
    branches:
      - main
      - validate/*
  pull_request:

env:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  codecov_token: 4dc9e7e2-6b01-4932-a180-847b52b43d35 # Get a new one from https://codecov.io/
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  NUGET_NAME: 'networkvisor-eng'
  NUGET_URL: 'https://pkgs.dev.azure.com/NetworkVisor/_packaging/networkvisor-eng/nuget/v3/index.json'

jobs:
  build:

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - macos-latest
        - windows-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - name: Set build configuration on Mac/Linux
      run: echo "BUILDCONFIGURATION=Release-${{ runner.os }}" >> $GITHUB_ENV
      if: runner.os != 'Windows'
    - name: Set build configuration on Windows
      run: echo "BUILDCONFIGURATION=Release-${{ runner.os }}" >> $env:GITHUB_ENV
      if: runner.os == 'Windows'
    - name: Verify build configuration
      run: echo ${{ env.BUILDCONFIGURATION }}
    - name: Install prerequisites on Linux
      run: |
        ./init.ps1 -UpgradePrerequisites -NoRestore -InstallXHarnessTool -UpdateNugetSourceName: ${{ env.NUGET_NAME }} -UpdateNugetSourcePath: ${{ env.NUGET_URL }} -UpdateNugetUserName: NetworkVisor -UpdateNugetPassword: ${{ secrets.NETWORKVISOR_BUILD_PAT }}
        dotnet --info
      shell: pwsh
      if: runner.os == 'Linux'
    - name: Install prerequisites on Win/Mac
      run: |
        ./init.ps1 -UpgradePrerequisites -InstallMaui -InstallXHarnessTool -UpdateNugetSourceName: ${{ env.NUGET_NAME }} -UpdateNugetSourcePath: ${{ env.NUGET_URL }} -UpdateNugetUserName: NetworkVisor -UpdateNugetPassword: ${{ secrets.NETWORKVISOR_BUILD_PAT }}
        dotnet --info
      shell: pwsh
      if: runner.os != 'Linux'
    - name: Set pipeline variables based on source
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: build
      run: dotnet build -c ${{ env.BUILDCONFIGURATION }} /v:m /bl:"bin/build_logs/build.binlog"
    - name: pack
      run: dotnet pack -c ${{ env.BUILDCONFIGURATION }} /v:m /bl:"bin/build_logs/pack.binlog"
    - name: test netcoreapp2.1
      run: dotnet test -f netcoreapp2.1 -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_netcoreapp21.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
    - name: test netcoreapp3.1
      run: dotnet test -f netcoreapp3.1 -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_netcoreapp31.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
    - name: test net5.0
      run: dotnet test -f net5.0 -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net5.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
    - name: test net6.0
      run: dotnet test -f net6.0 -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net6.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
    - name: test net472
      run: dotnet test -f net461 -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net461.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
      if: runner.os == 'Windows'
    - name: test net5.0-windows
      run: dotnet test -f net5.0-windows -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net5_windows.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
      if: runner.os == 'Windows'
    - name: test net6.0-windows
      run: dotnet test -f net6.0-windows -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net6_windows.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
      if: runner.os == 'Windows'
    - name: test net6.0-macos
      run: dotnet test -f net6.0-macos -c ${{ env.BUILDCONFIGURATION }} /bl:"bin/build_logs/test_net6_macos.binlog" --filter "Category=NetCore|Category=${{ runner.os }}" -v n /p:CollectCoverage=true --logger trx --settings "${{ github.workspace }}/.github/workflows/${{ runner.os }}.runsettings"
      if: runner.os == 'MacOS'
    - name: Update pipeline variables based on build outputs
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: Collect artifacts
      run: azure-pipelines/artifacts/_stage_all.ps1
      shell: pwsh
      if: always()
    - name: Upload project.assets.json files
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: projectAssetsJson-${{ runner.os }}
        path: obj/_artifacts/projectAssetsJson
      continue-on-error: true
    - name: Upload variables
      uses: actions/upload-artifact@v1
      with:
        name: variables-${{ runner.os }}
        path: obj/_artifacts/variables
      continue-on-error: true
    - name: Upload build_logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: build_logs-${{ runner.os }}
        path: obj/_artifacts/build_logs
      continue-on-error: true
    - name: Upload testResults
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: testResults-${{ runner.os }}
        path: obj/_artifacts/testResults
      continue-on-error: true
    - name: Upload coverageResults
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: coverageResults-${{ runner.os }}
        path: obj/_artifacts/coverageResults
      continue-on-error: true
    - name: Upload symbols
      uses: actions/upload-artifact@v1
      with:
        name: symbols-${{ runner.os }}
        path: obj/_artifacts/symbols
      continue-on-error: true
    - name: Upload deployables
      uses: actions/upload-artifact@v1
      with:
        name: deployables-${{ runner.os }}
        path: obj/_artifacts/deployables
      if: always()
    - name: Publish code coverage results to codecov.io
      run: bash <(curl -s https://codecov.io/bash)
      shell: bash
      timeout-minutes: 3
      continue-on-error: true
    - name: Cleanup Nuget Source
      if: always()
      continue-on-error: true
      run: |
        dotnet nuget remove source networkvisor-eng
