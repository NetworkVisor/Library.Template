name: CI

on:
  push:
    branches:
      - main
      - validate/*
  pull_request:

env:
  PRODUCTION_BUILD: Production
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BUILDCONFIGURATION: Release-Windows
  codecov_token: 5a7f688f-2863-461e-b3aa-8c65c41b4159
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages/
  NUGET_NAME: 'networkvisor-eng'
  NUGET_URL: 'https://pkgs.dev.azure.com/NetworkVisor/_packaging/networkvisor-eng/nuget/v3/index.json'
  RUN_DOTNET_FORMAT: false
  ARTIFACT_RETENTION_DAYS: 15 

jobs:
  build:

    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os:
        - macOS-13
        - windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
      if: runner.os == 'macOS'

    - name: Install OpenJDK v11
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '11'
    - name: Set build configuration on Mac
      run: echo "BUILDCONFIGURATION=Release-MacOS" >> $GITHUB_ENV
      if: runner.os == 'macOS'
    - name: Set build configuration on Windows
      run: echo "BUILDCONFIGURATION=Release-Windows" >> $env:GITHUB_ENV
      if: runner.os == 'Windows'
    - name: Verify build configuration
      run: echo ${{ env.BUILDCONFIGURATION }}
    - name: Verify production build
      run: echo ${{ env.PRODUCTION_BUILD }}
    - name: ‚öô Install prerequisites on Windows
      run: |
        ./init.ps1 -UpgradePrerequisites -WorkloadRestore -UpdateNugetSourceName: ${{ env.NUGET_NAME }} -UpdateNugetSourcePath: ${{ env.NUGET_URL }} -UpdateNugetUserName: NetworkVisor -UpdateNugetPassword: ${{ secrets.NETWORKVISOR_BUILD_PAT }} 
        dotnet --info
        
        # Print mono version if it is present.
        if (Get-Command mono -ErrorAction SilentlyContinue) {
          mono --version
        }
      shell: pwsh
      if: runner.os == 'Windows'
    - name: ‚öô Install prerequisites on MacOS
      run: |
        ./init.ps1 -UpgradePrerequisites -WorkloadRestore -UpdateNugetSourceName: ${{ env.NUGET_NAME }} -UpdateNugetSourcePath: ${{ env.NUGET_URL }} -UpdateNugetUserName: NetworkVisor -UpdateNugetPassword: ${{ secrets.NETWORKVISOR_BUILD_PAT }}
        dotnet --info

        # Print mono version if it is present.
        if (Get-Command mono -ErrorAction SilentlyContinue) {
          mono --version
        }
      shell: pwsh
      if: runner.os == 'macOS'
    - name: ‚öôÔ∏è Set pipeline variables based on source
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: format
      run: dotnet format --verify-no-changes --verbosity diagnostic --binarylog:"${{ runner.temp }}/_artifacts/build_logs/format.binlog"
      if: ${{ env.RUN_DOTNET_FORMAT == 'true'}}
    - name: üõ† build
      run: dotnet build -t:build,pack --no-restore -c ${{ env.BUILDCONFIGURATION }} -warnaserror /bl:"${{ runner.temp }}/_artifacts/build_logs/build.binlog" -property:ProductionBuild=${{ env.PRODUCTION_BUILD}}
    - name: üß™ test
      run: azure-pipelines/dotnet-test-cloud.ps1 -Configuration ${{ env.BUILDCONFIGURATION }} -Agent ${{ runner.os }} -ProductionBuild ${{ env.PRODUCTION_BUILD }}
      shell: pwsh
    - name: ‚öô Update pipeline variables based on build outputs
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: üì• Collect artifacts
      run: azure-pipelines/artifacts/_stage_all.ps1
      shell: pwsh
      if: always()
    - name: üì¢ Upload project.assets.json files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: projectAssetsJson-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/projectAssetsJson
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload variables
      uses: actions/upload-artifact@v4
      with:
        name: variables-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/Variables
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload build_logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build_logs-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/build_logs
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload test_logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test_logs-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/test_logs
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload testResults
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: testResults-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/testResults
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload coverageResults
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverageResults-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/coverageResults
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload symbols
      uses: actions/upload-artifact@v4
      with:
        name: symbols-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/symbols
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      continue-on-error: true
    - name: üì¢ Upload deployables
      uses: actions/upload-artifact@v4
      with:
        name: deployables-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/deployables
        retention-days: ${{ env. ARTIFACT_RETENTION_DAYS }}
      if: always()
    - name: üì¢ Publish code coverage results to codecov.io
      run: ./azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "${{ env.codecov_token }}" -PathToCodeCoverage "${{ runner.temp }}/_artifacts/coverageResults" -Name "${{ runner.os }} Coverage Results" -Flags "${{ runner.os }}Host,${{ env.BUILDCONFIGURATION }}" -CalcNSFlags
      shell: pwsh
      timeout-minutes: 3
      continue-on-error: true
      if: always()
    - name: Cleanup Nuget Source
      if: always()
      continue-on-error: true
      run: |
        dotnet nuget remove source networkvisor-eng